{% extends 'admin/base.html.twig' %}

{% block title %}Gestion des utilisateurs{% endblock %}

{% block admin_content %}
    <div class="space-y-6" id="app">
        {% if is_granted('ROLE_ADMIN') %}
            <div class="bg-green-100 p-2 rounded">
                Connecté en tant qu'administrateur
            </div>
        {% else %}
            <div class="bg-red-100 p-2 rounded">
                Accès non autorisé - Rôle administrateur requis
            </div>
        {% endif %}
        <div class="flex justify-between items-center">
            <div>
                <h1 class="text-3xl font-semibold text-gray-800">Gestion des utilisateurs</h1>
                <p class="mt-1 text-gray-600">Gérez les comptes utilisateurs et leurs permissions</p>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nom</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rôles</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="users-table-body" class="bg-white divide-y divide-gray-200">
                        <tr>
                            <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                                Chargement des utilisateurs...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div id="userModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="mt-3">
                <h3 class="text-lg font-medium text-gray-900" id="modal-title">Nouvel utilisateur</h3>
                <form id="userForm" class="mt-4">
                    <div class="space-y-4">
                        <div id="userInfo" class="mb-4 text-gray-600">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Rôles</label>
                            <select name="roles" multiple class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                <option value="ROLE_USER">Utilisateur</option>
                                <option value="ROLE_ADMIN">Administrateur</option>
                                <option value="ROLE_BANNED">Banni</option>
                            </select>
                            <p class="mt-1 text-sm text-gray-500">
                                Note: Un utilisateur banni ne pourra plus se connecter ni effectuer de réservations.
                            </p>
                        </div>
                    </div>
                    <div class="mt-5 flex justify-end space-x-3">
                        <button type="button" id="closeModalButton"
                                class="px-4 py-2 bg-gray-100 text-gray-900 rounded-md hover:bg-gray-200">
                            Annuler
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                            Enregistrer
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
<script>
class UserManager {
    constructor() {
        this.users = [];
        this.init();
    }

    init() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initializeApp());
        } else {
            this.initializeApp();
        }
    }

    initializeApp() {
        console.log('Initialisation de l\'application...');
        this.initializeButtons();
        this.initializeForm();
        this.loadUsers();
    }

    initializeButtons() {
        const closeButton = document.getElementById('closeModalButton');
        if (closeButton) {
            closeButton.addEventListener('click', () => this.closeUserModal());
        }
    }

    initializeForm() {
        const form = document.getElementById('userForm');
        if (form) {
            form.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }
    }

    async loadUsers() {
        try {
            const response = await fetch('/api/admin/users');
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            const data = await response.json();
            this.users = data.users || [];
            this.renderUsers();
        } catch (error) {
            console.error('Erreur lors du chargement:', error);
            this.showError(error.message);
        }
    }

    renderUsers() {
        const tbody = document.getElementById('users-table-body');
        if (!tbody) return;

        if (!this.users.length) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                        Aucun utilisateur trouvé
                    </td>
                </tr>
            `;
            return;
        }

        tbody.innerHTML = this.users.map(user => this.renderUserRow(user)).join('');
        this.addTableEventListeners();
    }

    renderUserRow(user) {
        return `
            <tr class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.id || ''}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${user.email || ''}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    ${user.firstName || ''} ${user.lastName || ''}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${this.renderRoles(user.roles)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-3">
                    <button class="edit-user-btn text-indigo-600 hover:text-indigo-900" data-user-id="${user.id}">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="delete-user-btn text-red-600 hover:text-red-900" data-user-id="${user.id}">
                        <i class="fas fa-trash"></i>
                    </button>
                </td>
            </tr>
        `;
    }

    renderRoles(roles) {
        if (!Array.isArray(roles)) return '';
        return roles.map(role => `
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                role === 'ROLE_BANNED' ? 'bg-red-100 text-red-800' :
                role === 'ROLE_ADMIN' ? 'bg-blue-100 text-blue-800' :
                'bg-green-100 text-green-800'
            }">
                ${role.replace('ROLE_', '')}
            </span>
        `).join(' ');
    }

    addTableEventListeners() {
        document.querySelectorAll('.edit-user-btn').forEach(button => {
            button.addEventListener('click', (e) => this.editUser(e.target.closest('button').dataset.userId));
        });

        document.querySelectorAll('.delete-user-btn').forEach(button => {
            button.addEventListener('click', (e) => this.deleteUser(e.target.closest('button').dataset.userId));
        });
    }

    async deleteUser(userId) {
        if (!confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) {
            return;
        }

        try {
            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                const errorData = await response.json();
                if (errorData.error.includes('réservations associées')) {
                    throw new Error('Cet utilisateur ne peut pas être supprimé car il a des réservations actives. Supprimez d\'abord ses réservations.');
                }
                throw new Error(errorData.error || `Erreur HTTP: ${response.status}`);
            }

            await this.loadUsers();
            this.showNotification('Utilisateur supprimé avec succès');
        } catch (error) {
            console.error('Erreur lors de la suppression:', error);
            this.showNotification(error.message, 'error');
        }
    }

    showNotification(message, type = 'success') {
        const notificationDiv = document.createElement('div');
        notificationDiv.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
            type === 'success' ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
        }`;
        notificationDiv.textContent = message;

        document.body.appendChild(notificationDiv);

        setTimeout(() => {
            notificationDiv.remove();
        }, 3000);
    }

    async editUser(userId) {
        try {
            const response = await fetch(`/api/admin/users/${userId}`);
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Erreur lors du chargement de l\'utilisateur');
            }
            const user = await response.json();
            console.log('User data:', user); 

            document.getElementById('modal-title').textContent = 'Modifier les rôles';
            const form = document.getElementById('userForm');
            
            document.getElementById('userInfo').innerHTML = `
                <p><strong>Email:</strong> ${user.email}</p>
                <p><strong>Nom:</strong> ${user.firstName} ${user.lastName}</p>
            `;
            
            const rolesSelect = form.elements.roles;
            Array.from(rolesSelect.options).forEach(option => {
                option.selected = user.roles.includes(option.value);
            });
            
            form.dataset.userId = userId;
            
            this.showCreateUserModal();
        } catch (error) {
            console.error('Erreur:', error);
            this.showNotification(error.message, 'error');
        }
    }

    async handleFormSubmit(e) {
        e.preventDefault();
        const form = e.target;
        const userId = form.dataset.userId;
        
        const data = {
            roles: Array.from(form.elements.roles.selectedOptions).map(option => option.value)
        };
        
        try {
            const method = userId ? 'PUT' : 'POST';
            const url = userId ? `/api/admin/users/${userId}` : '/api/admin/users';
            
            const response = await fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ roles: data.roles })
            });

            if (!response.ok) {
                throw new Error('Erreur lors de la sauvegarde');
            }

            this.closeUserModal();
            await this.loadUsers();
            this.showNotification(userId ? 'Rôles modifiés avec succès' : 'Utilisateur créé avec succès');
        } catch (error) {
            console.error('Erreur:', error);
            this.showNotification('Erreur lors de la sauvegarde', 'error');
        }
    }

    showCreateUserModal() {
        const modal = document.getElementById('userModal');
        if (modal) {
            modal.classList.remove('hidden');
        }
    }

    closeUserModal() {
        const modal = document.getElementById('userModal');
        if (modal) {
            modal.classList.add('hidden');
            const form = document.getElementById('userForm');
            if (form) {
                form.reset();
                form.dataset.userId = '';
                document.getElementById('userInfo').innerHTML = '';
                document.getElementById('modal-title').textContent = 'Nouvel utilisateur';
            }
        }
    }
}

const userManager = new UserManager();
</script>
{% endblock %} 